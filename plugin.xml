<?xml version="1.0" encoding="utf-8"?>
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier version="1" id="com.urbancode.air.plugin.DaticalDB4UDeploy" name="Datical DB" />
    <description>Datical DB makes it incredibly easy to automate and
			manage database schema changes for high volume, complex releases,
			across any environment, for any database. No agents required.
		</description>
    <tag>Database</tag>
  </header>
  <step-type name="Datical DB">
    <description>Executes Datical DB</description>
    <properties>
      <property name="daticalDBcmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:resource/daticalDBcmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:resource/daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." />
      </property>
      <property name="daticalDBAction" required="true">
        <property-ui type="selectBox" label="Datical DB Action" description="The Datical DB Server Name is the name of the server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan. Based on your Action selection below, you may enter none, one, or two Server Names." />
        <!-- --><value label="Forecast">forecast</value>
        <!-- --><value label="Snapshot">snapshot</value>
        <!-- --><value label="Deploy">deploy</value>
        <!-- --><value label="Deploy (with Auto-Rollback)">deploy-autoRollback</value>
        <!-- --><value label="Rollback">rollback</value>

        <!-- --><value label="Status">status</value>
        <!-- --><value label="Check Drivers">checkdrivers</value>

        <value label="Diff ChangeLog">diffChangelog</value>
        <value label="Diff Report">diff</value>
        <!-- --><value label="History">history</value>
		        
		<value label="Change Log Sync">changeLogSync</value>
		<value label="Clear Checksums">clearCheckSums</value>
      </property>
      <property name="daticalDBServer" required="false">
        <property-ui type="textBox" label="Datical DB Action Argument" description="The Datical DB Action Argument will typically be the name of the server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan. Based on your Action selection below, you may enter none, one, or two Server Names. For the Rollback Action, the argument will take the form of 'SERVERNAME changeid:id=CHANGESETID'." />
      </property>

    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //checkdrivers
        scanner.register("(?i)Found ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //status
        scanner.register("(?i) is up-to-date ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i) is at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //history
        scanner.register("(?i)Changelog",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
 
		//forecast
        scanner.register("(?i)Forecast detected the following problems:",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //snapshot
        scanner.register("(?i)Snapshot of database",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //deploy
        scanner.register("(?i)Successfully deployed changes to",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Update Failed",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?iSuccessful)Update Failed.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //rollback
        scanner.register("(?i)Rolled ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //clearCheckSums
        scanner.register("(?i)Successfully cleared checksums in database",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
		 
        scanner.scan();
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="daticaldb.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
</plugin>
