<?xml version="1.0" encoding="utf-8"?>
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier version="1" id="com.urbancode.air.plugin.DaticalDB4UDeploy" name="Datical DB" />
    <description>Datical DB makes it incredibly easy to automate and
			manage database schema changes for high volume, complex releases,
			across any environment, for any database. No agents required.
		</description>
    <tag>Database/Datical DB</tag>
  </header>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Deploy">
    <description>Deploys a Datical DB project to a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
      <property name="daticalDBRollback" required="false">
        <property-ui type="checkBox" label="Automatic Rollback" description="If the Datical DB deploy fails, selecting this box will automatically rollback the server to the initial state using the rollback instructions specified in the Datical DB project and/or the Datical DB defaults." />
      </property>

    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //deploy
        scanner.register("(?i)Successfully deployed changes to",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Update Failed",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="deploy.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

<!-- ---------------------------------------------------------------------- -->
  <step-type name="Forecast">
    <description>Forecasts a Datical DB project against a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
		//forecast
        scanner.register("(?i)Forecast detected the following problems:",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="forecast.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Snapshot">
    <description>Creates a Datical DB Snapshot of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //snapshot
        scanner.register("(?i)Snapshot of database",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
		//Snapshot of database 'Dev' available at C:\Users\robert\git\MyDeploymentProject\Snapshots\snapshot_Dev_20140121_103845
        scanner.register("(?i)Snapshot of database ",  function(lineNumber, line) {
              var snapshot = line.split(" at ");
              properties.put("DaticalSnapshot", snapshot[1]);
        });

        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="snapshot.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="History">
    <description>Details the Datical DB deployment history of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //history
        scanner.register("(?i)Changelog",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });

        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="history.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Change Log Sync">
    <description>Marks a Server as deployed based on a Datical DB Project without executing changes.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        

        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="changelogsync.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Clear Check Sums">
    <description>Removes Change Set Check Sums from a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        
        //clearCheckSums
        scanner.register("(?i)Successfully cleared checksums in database",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="clearchecksums.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Status">
    <description>Reports on the current Status of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="false">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //status
        scanner.register("(?i) is up-to-date ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i) is at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        

        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="status.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Check Drivers">
    <description>Returns the current database drivers settings used by Datical DB.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //checkdrivers
        scanner.register("(?i)Found ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        

        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="checkdrivers.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Rollback">
    <description>Performs a Rollback on a Server given a specific version.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
      <property name="daticalDBVersion" required="true">
        <property-ui type="textBox" label="Valid Versions include the following: 'changeid:id=CHANGESETID', 'count:n=COUNT', 'date:yyyy-MM-dd=YYYY-MM-DD', or 'tag:dbtag=DBTAG'." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //checkdrivers
        scanner.register("(?i)Found ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //rollback
        scanner.register("(?i)Rolled ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="rollback.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
<!-- ---------------------------------------------------------------------- -->
  <step-type name="Diff Change Log">
    <description>Creates a Change Log based on the differences between two servers. Can append to an existing Change Log.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServerReference" required="true">
        <property-ui type="textBox" label="Datical DB Reference Server" description="The Datical DB Server used as the Reference for the differences. This one will be more 'up to date'." />
      </property>
      <property name="daticalDBServerComparison" required="true">
        <property-ui type="textBox" label="Datical DB Comparison Server" description="The Datical DB Server used as the Comparison for the differences. This one will be less 'up to date'." />
      </property>
      <property name="daticalDBChangeLog" required="false">
        <property-ui type="textBox" label="Change Log to create or append to. Optional." />
      </property>


    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //diff*
        scanner.register("(?i)Target database instance",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Diff of databases",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });

        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
		 
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="diffchangelog.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>



<!-- ---------------------------------------------------------------------- -->
  <step-type name="Diff Report">
    <description>Generates a Report on the differences between two servers.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServerReference" required="true">
        <property-ui type="textBox" label="Datical DB Reference Server" description="The Datical DB Server used as the Reference for the differences. This one will be more 'up to date'." />
      </property>
      <property name="daticalDBServerComparison" required="true">
        <property-ui type="textBox" label="Datical DB Comparison Server" description="The Datical DB Server used as the Comparison for the differences. This one will be less 'up to date'." />
      </property>


    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        //diff*
        scanner.register("(?i)Target database instance",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Diff of databases",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });

        //Report will be written to C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\Reports\forecast_QA_20140120_132913
        scanner.register("(?i)Report will be written to ",  function(lineNumber, line) {
              var report = line.replace("Report will be written to ", "");
              properties.put("DaticalReport", report);
        });
        
        //The DaticalDB log file is located at C:\dev\UrbanCode\ibm-ucd\agent\var\work\helloWorld\daticaldb.log
        scanner.register("(?i)The DaticalDB log file is located at ",  function(lineNumber, line) {
              var log = line.replace("The DaticalDB log file is located at ", "");
              properties.put("DaticalLog", log);
        });
        
		//Diff of databases 'Dev' and 'QA' available at C:\Users\robert\git\MyDeploymentProject\Reports\Diffs\diff_Dev_QA_20140121_111745.rpt
        scanner.register("(?i)Diff of databases ",  function(lineNumber, line) {
              var report = line.split(" at ");
              properties.put("DaticalDiffReport", report[1]);
        });

        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="diff.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
</plugin>
