<?xml version="1.0" encoding="utf-8"?>
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier version="2" id="com.datical.integration.udeploy.DaticalDB4UDeploy" name="Datical DB" />
    <description>Datical DB makes it incredibly easy to automate and
			manage database schema changes for high volume, complex releases,
			across any environment, for any database. No agents required.
		</description>
    <tag>Datical DB</tag>
  </header>

  <step-type name="Datical DB Deploy">
    <description>Deploys a Datical DB project to a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer). Ideally, create a property named daticalDBCmd with the appropriate value." default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located. Ideally, create a property named daticalDBDriversDir with the appropriate value." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
      <property name="daticalDBRollback" required="false">
        <property-ui type="checkBox" label="Automatic Rollback" description="If the Datical DB deploy fails, selecting this box will automatically rollback the server to the initial state using the rollback instructions specified in the Datical DB project and/or the Datical DB defaults." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
              var report = line.replace("Report ready at ", "");
              properties.put("DaticalReport", report);
              var reportDir = report.replace("deployReport.html", "");
              properties.put("DaticalReportDir", reportDir);
              
        });
        
        //deploy
        scanner.register("(?i)Successfully deployed changes to",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Update Failed",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="deploy.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Forecast">
    <description>Forecasts a Datical DB project against a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
			var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
            var reportDir = report.replace("forecastReport.html", "");
            properties.put("DaticalReportDir", reportDir);
        });
        
		//forecast
        scanner.register("(?i)Forecast detected the following problems:",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        scanner.scan();
        
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="forecast.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Snapshot">
    <description>Creates a Datical DB Snapshot of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //snapshot
        scanner.register("(?i)Snapshot of database",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var snapshot = line.split(" at ");
            properties.put("DaticalSnapshot", snapshot[1]);
        });

        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="snapshot.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB History">
    <description>Details the Datical DB deployment history of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //history
        scanner.register("(?i)Changelog",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });

        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="history.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Change Log Sync">
    <description>Marks a Server as deployed based on a Datical DB Project without executing changes.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        scanner.scan();
        

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="changelogsync.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Clear Check Sums">
    <description>Removes Change Set Check Sums from a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //clearCheckSums
        scanner.register("(?i)Successfully cleared checksums in database",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="clearchecksums.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Status">
    <description>Reports on the current Status of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="false">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //status
        scanner.register("(?i) is up-to-date ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i) is at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="status.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Status Details">
    <description>Reports on the detailed current Status of a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="false">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //status
        scanner.register("(?i) is up-to-date ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i) is at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="statusdetails.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>


  <step-type name="Datical DB Check Drivers">
    <description>Returns the current database drivers settings used by Datical DB.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //checkdrivers
        scanner.register("(?i)Found ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });

        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="checkdrivers.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Rollback">
    <description>Performs a Rollback on a Server given a specific version.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServer" required="true">
        <property-ui type="textBox" label="Datical DB Server" description="The Datical DB Server you wish to manage with Datical DB. You can determine this value by opening Datical DB and choosing a server listed in your Deployment Plan." />
      </property>
      <property name="daticalDBVersion" required="true">
        <property-ui type="textBox" label="Datical DB Rollback Version" description="Valid Versions include the following: 'changeid:id=CHANGESETID', 'count:n=COUNT', 'date:yyyy-MM-dd=YYYY-MM-DD', or 'tag:dbtag=DBTAG'." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //rollback
        scanner.register("(?i)Rolled ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="rollback.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Diff Change Log">
    <description>Creates a Change Log based on the differences between two servers. Can append to an existing Change Log.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServerReference" required="true">
        <property-ui type="textBox" label="Datical DB Reference Server" description="The Datical DB Server used as the Reference for the differences. This one will be more 'up to date'." />
      </property>
      <property name="daticalDBServerComparison" required="true">
        <property-ui type="textBox" label="Datical DB Comparison Server" description="The Datical DB Server used as the Comparison for the differences. This one will be less 'up to date'." />
      </property>
      <property name="daticalDBChangeLog" required="false">
        <property-ui type="textBox" label="Datical DB Output File" description="Change Log to create or append to. Optional." />
      </property>


    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //diff*
        scanner.register("(?i)Target database instance",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Diff of databases",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var diffreport = line.split(" at ");
            properties.put("DaticalDiff", diffreport[1]);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="diffchangelog.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>

  <step-type name="Datical DB Diff Report">
    <description>Generates a Report on the differences between two servers.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBServerReference" required="true">
        <property-ui type="textBox" label="Datical DB Reference Server" description="The Datical DB Server used as the Reference for the differences. This one will be more 'up to date'." />
      </property>
      <property name="daticalDBServerComparison" required="true">
        <property-ui type="textBox" label="Datical DB Comparison Server" description="The Datical DB Server used as the Comparison for the differences. This one will be less 'up to date'." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //diff*
        scanner.register("(?i)Target database instance",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Diff of databases",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
              var diffreport = line.split(" at ");
              properties.put("DaticalDiffReport", diffreport[1]);
        });

        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="diff.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>
  
  <step-type name="Datical DB Create New Project">
    <description>Creates a new Datical DB Project in the project directory. Useful for when you are only supplied a changelog.xml and wish to create the project dynamically.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is to be located." default-value="."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="createnewproject.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>  
  
  <step-type name="Datical DB Create New Database Definition">
    <description>Creates a new Datical DB Project in the project directory. Useful for when you are only supplied a changelog.xml and wish to create the project dynamically.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer)" default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is to be located." default-value="."/>
      </property>
      <property name="daticalDBVendor" required="true">
      	<!-- TODO: select list -->
        <property-ui type="textBox" label="Datical DB Database Vendor" description = "The target database vendor. Valid values are Oracle, DB2, MSSQL, MySQL, PostgreSQL." default-value="DB2"/>
      </property>
      <property name="daticalDBStepName" required="true">
      	<property-ui type="textBox" label="Datical DB Step Name" description = "This is an Internal user friendly name for your database." default-value="MyDB"/>
      </property>
      <property name="daticalDBHost" required="true">
      	<property-ui type="textBox" label="Datical DB Database Hostname" description = "The hostname or IP address of the Database Server." default-value="192.168.0.1"/>
      </property>
      <property name="daticalDBPort" required="true">
      	<property-ui type="textBox" label="Datical DB Database Port" description = "The port of the Database Server." default-value="50000"/>
      </property>
      <property name="daticalDBUsername" required="true">
      	<property-ui type="textBox" label="Datical DB Database Username" description = "The username of the Database Server." default-value="db2inst1"/>
      </property>
      <property name="daticalDBPassword" required="true">
      <!-- TODO: mask this password -->
      	<property-ui type="textBox" label="Datical DB Database Password" description = "The password of the Database Server." default-value="p455w0rd"/>
      </property>
		<!-- OPTIONAL -->
      <property name="daticalDBContext" required="false">
      	<property-ui type="textBox" label="Datical DB Context" description = "The Context used by Datical DB. Optional."/>
      </property>
      <property name="daticalDBDefaultSchemaName" required="false">
      	<property-ui type="textBox" label="Datical DB Default Schema Name" description = "The Default Schema Name used by Datical DB. Optional."/>
      </property>
      <property name="daticalDBDefaultCatalogName" required="false">
      	<property-ui type="textBox" label="Datical DB Default Catalog Name" description = "The Default Catalog Name used by Datical DB. Optional."/>
      </property>
		<!-- platform specific -->
		<!-- DB2, MySQL, PostgreSQL -->
      <property name="daticalDBDatabaseName" required="false">
      	<property-ui type="textBox" label="Datical DB Database Name (DB2, MSSQL, MySQL, PostgreSQL)" description = "The Database Name. Required for DB2, MySQL, PostgreSQL."/>
      </property>
      <property name="daticalDBSID" required="false">
      	<property-ui type="textBox" label="Datical DB SID (Oracle)" description = "The Database SID. Either SID or Service Name is required for Oracle."/>
      </property>
      <property name="daticalDBServiceName" required="false">
      	<property-ui type="textBox" label="Datical DB Service Name (Oracle)" description = "The Database Service Name. Either SID or Service Name is required for Oracle."/>
      </property>
		<!-- MSSQL -->
      <property name="daticalDBIsIntegratedSecurity" required="false">
      <!-- TODO: true, false select list -->
      	<property-ui type="textBox" label="Integrated Security? (MSSQL)" description = "Determines if the database uses Integrated Security. Optional for MSSQL."/>
      </property>
      <property name="daticalDBApplicationName" required="false">
      	<property-ui type="textBox" label="Datical DB Application Name (MSSQL)" description = "The Datical DB Application Name. Optional for MSSQL."/>
      </property>
      <property name="daticalDBInstanceName" required="false">
      	<property-ui type="textBox" label="Datical DB Instance Name (MSSQL)" description = "The Datical DB Instance Name. Optional for MSSQL."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="createnewdbdef.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>    

  <step-type name="Datical DB Install License">
    <description>Deploys a Datical DB project to a Server.</description>
    <properties>
      <property name="daticalDBCmd" required="true">
        <property-ui type="textBox" label="Datical DB Command" description="The full path to the Datical DB command (e.g., C:\DaticalDB\repl\hammer.bat or /opt/DaticalDB/repl/hammer). Ideally, create a property named daticalDBCmd with the appropriate value." default-value="${p:daticalDBCmd}" />
      </property>
      <property name="daticalDBDriversDir" required="true">
        <property-ui type="textBox" label="Datical DB Driver Directory" description="The full path where Datical DB drivers are located. Ideally, create a property named daticalDBDriversDir with the appropriate value." default-value="${p:daticalDBDriversDir}" />
      </property>
      <property name="daticalDBProjectDir" required="true">
        <property-ui type="textBox" label="Datical DB Project Directory" description="The full path where the Datical DB project is located." default-value="."/>
      </property>
      <property name="daticalDBLicensePath" required="true">
        <property-ui type="textBox" label="Datical DB License Path" description="The full path where the License File is located." />
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
        
        //all
        scanner.register("(?i)The DaticalDB log file",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var log = line.replace("The DaticalDB log file is located at ", "");
            properties.put("DaticalLog", log);
        });
        scanner.register("(?i)cannot be found in the current project",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Please specify a database as an argument or using the dbdef property",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)No database specified.",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
        });
        scanner.register("(?i)Report ready at ",  function(lineNumber, line) {
        	scanner.addLOI(lineNumber);
            var report = line.replace("Report ready at ", "");
            properties.put("DaticalReport", report);
        });
        
        //installLicense
        
        scanner.scan();

     ]]></post-processing>
    <command program="${agent:GROOVY_HOME}/bin/groovy">
      <arg value="-cp" />
      <arg path="classes" />
      <arg file="installlicense.groovy" />
      <arg file="${PLUGIN_INPUT_PROPS}" />
      <arg file="${PLUGIN_OUTPUT_PROPS}" />
    </command>
  </step-type>



  
</plugin>